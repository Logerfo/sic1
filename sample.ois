; Read a number and print out that many 1s (e.g. 3 -> [1, 1, 1])

    ; Instruction               ; Explanation (using input of 3 as an example)
                                ; Note: as defined in the "State" section below: @tmp = -1 and @count = 0
    ;---------------------------|------------------------------------------------------------------------
    subleq @tmp, @IN            ; Read input and subtract from @tmp (@tmp = -1 - 3 = -4)
    subleq @count, @tmp         ; Negate tmp into count (@count = 0 - (-4) = 4)
@loop:                          ;
    subleq @count, @one, @HALT  ; Subtract one from count and halt if <= 0 (@count = 4 - 1 = 3, for the first iteration)
    subleq @OUT, @n_one         ; Output 1 (note the constant is -1 since we'll be subtracting: @OUT = 0 - (-1) = 1)
    subleq @zero, @zero, @loop  ; Jump to address 9 (@zero = 0 - 0 = 0, which is <= 0, so we jump to @loop to continue iterating)

; State 
    @tmp:   .data -1
    @count: .data 0

; Constants 
    @zero:  .data 0
    @one:   .data 1
    @n_one: .data -1