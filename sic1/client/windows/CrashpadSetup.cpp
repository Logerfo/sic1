/*	
	Backtrace Crashpad Integration
	This template was generated by Visual Studio Backtrace Crashpad extensions.
	Please replace following values before you prepare release version of your application:
	* path to Crashpad database,
	* path to Crashpad handler,
	
	Please check generated precompile header.
	If you have more question please contact us!
	https://backtrace.io/
*/

#include "stdafx.h"

#ifndef _DEBUG

#include "CrashpadSetup.hpp"
#include <client/crash_report_database.h>
#include <client/settings.h>
#include <client/crashpad_client.h>

namespace backtrace
{
	using namespace crashpad;
	static CrashpadClient client;

	bool initializeCrashpad(const std::wstring& db_path, const std::wstring& handler_path) {
		std::map<std::string, std::string> annotations;
		std::vector<std::string> arguments;

		std::string url("https://submit.backtrace.io/apg/fda9703f32e186373f32edc4b82b0c0d1c88302c031da660cfca89e337b9516b/minidump");
		
		base::FilePath db(db_path);
		base::FilePath handler(handler_path);
		std::unique_ptr<CrashReportDatabase> database = crashpad::CrashReportDatabase::Initialize(db);

		if (database == nullptr || database->GetSettings() == NULL)
		{
			return false;
		}

		/* Enable automated uploads. */
		database->GetSettings()->SetUploadsEnabled(true);

		bool rc = client.StartHandler(handler,
			db,
			db,
			url,
			annotations,
			arguments,
			true,
			true);
		
		if (rc == false) 
		{
			return false;
		}

		/* Optional, wait for Crashpad to initialize. */
		return client.WaitForHandlerStart(INFINITE);
	}
}

#endif
